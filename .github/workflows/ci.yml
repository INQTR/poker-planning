name: CI

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, labeled ]
  push:
    branches: [ main, develop ]

jobs:
  # Fast checks that always run (PR and push, but skip on just label events)
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    # Skip lint-and-test if this is just a label event and we've already run it
    if: github.event.action != 'labeled'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Client checks
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install client dependencies
      run: npm ci
      working-directory: ./client

    - name: Run ESLint
      run: npm run lint
      working-directory: ./client

    - name: Run TypeScript type checking
      run: npm run checkTs
      working-directory: ./client

    - name: Run client unit tests
      run: npm run test -- --run
      working-directory: ./client

    # Server checks
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          server/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('server/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check Rust formatting
      run: cargo fmt -- --check
      working-directory: ./server

    - name: Run Clippy (Rust linter)
      run: cargo clippy -- -D warnings
      working-directory: ./server

    - name: Run Rust tests
      run: cargo test
      working-directory: ./server

    - name: Build server (release)
      run: cargo build --release
      working-directory: ./server

    # Upload server binary for E2E tests (only if we're going to run them)
    - name: Upload server binary
      if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'run-e2e') || github.event.label.name == 'run-e2e'
      uses: actions/upload-artifact@v4
      with:
        name: server-binary
        path: server/target/release/poker-planning
        retention-days: 1

  # E2E tests (only run on main branch pushes or when specifically requested)
  # Build server for E2E tests when triggered by label (since lint-and-test is skipped)
  build-server-for-e2e:
    name: Build Server for E2E
    runs-on: ubuntu-latest
    if: github.event.action == 'labeled' && github.event.label.name == 'run-e2e'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          server/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('server/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build server (release)
      run: cargo build --release
      working-directory: ./server

    - name: Upload server binary
      uses: actions/upload-artifact@v4
      with:
        name: server-binary
        path: server/target/release/poker-planning
        retention-days: 1

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-server-for-e2e]
    # Run if either lint-and-test succeeded OR build-server-for-e2e succeeded
    if: always() && (needs.lint-and-test.result == 'success' || needs.build-server-for-e2e.result == 'success')

    steps:
    - name: Debug - Show event info
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Event action: ${{ github.event.action }}"
        echo "Label name: ${{ github.event.label.name }}"
        echo "PR labels: ${{ join(github.event.pull_request.labels.*.name, ', ') }}"
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Download server binary
      uses: actions/download-artifact@v4
      with:
        name: server-binary
        path: server/target/release/

    - name: Make server binary executable
      run: chmod +x server/target/release/poker-planning

    - name: Install client dependencies
      run: npm ci
      working-directory: ./client

    - name: Build client
      run: npm run build
      working-directory: ./client

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
      working-directory: ./client

    - name: Start server in background
      run: |
        cd server
        nohup ./target/release/poker-planning > server.log 2>&1 &
        echo $! > server.pid
        echo "Server started with PID $(cat server.pid)"

    - name: Start client in background
      run: |
        cd client
        nohup npm run preview > client.log 2>&1 &
        echo $! > client.pid
        echo "Client started with PID $(cat client.pid)"
        sleep 10

    - name: Wait for services to be ready
      run: |
        echo "Waiting for server health check on port 8000..."
        timeout 120 bash -c 'until curl -f http://localhost:8000/health_check > /dev/null 2>&1; do echo "Waiting for server..."; sleep 3; done'
        echo "Server is ready!"
        
        echo "Waiting for client on port 4173..."
        timeout 120 bash -c 'until curl -f http://localhost:4173 > /dev/null 2>&1; do echo "Waiting for client..."; sleep 3; done'
        echo "Client is ready!"

    - name: Run Playwright tests
      run: npm run test:e2e
      working-directory: ./client
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:4173

    - name: Stop background processes
      if: always()
      run: |
        if [ -f server/server.pid ]; then
          kill $(cat server/server.pid) || true
        fi
        if [ -f client/client.pid ]; then
          kill $(cat client/client.pid) || true
        fi

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: client/playwright-report/
        retention-days: 30

    - name: Upload service logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: service-logs
        path: |
          server/server.log
          client/client.log
        retention-days: 7
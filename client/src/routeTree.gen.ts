/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const TermsLazyRouteImport = createFileRoute('/terms')()
const PrivacyLazyRouteImport = createFileRoute('/privacy')()
const AboutLazyRouteImport = createFileRoute('/about')()
const IndexLazyRouteImport = createFileRoute('/')()
const RoomRoomIdLazyRouteImport = createFileRoute('/room/$roomId')()
const ClassicRoomRoomIdLazyRouteImport = createFileRoute(
  '/classic-room/$roomId',
)()

const TermsLazyRoute = TermsLazyRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/terms.lazy').then((d) => d.Route))
const PrivacyLazyRoute = PrivacyLazyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/privacy.lazy').then((d) => d.Route))
const AboutLazyRoute = AboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const RoomRoomIdLazyRoute = RoomRoomIdLazyRouteImport.update({
  id: '/room/$roomId',
  path: '/room/$roomId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/room.$roomId.lazy').then((d) => d.Route))
const ClassicRoomRoomIdLazyRoute = ClassicRoomRoomIdLazyRouteImport.update({
  id: '/classic-room/$roomId',
  path: '/classic-room/$roomId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/classic-room.$roomId.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/privacy': typeof PrivacyLazyRoute
  '/terms': typeof TermsLazyRoute
  '/classic-room/$roomId': typeof ClassicRoomRoomIdLazyRoute
  '/room/$roomId': typeof RoomRoomIdLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/privacy': typeof PrivacyLazyRoute
  '/terms': typeof TermsLazyRoute
  '/classic-room/$roomId': typeof ClassicRoomRoomIdLazyRoute
  '/room/$roomId': typeof RoomRoomIdLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/privacy': typeof PrivacyLazyRoute
  '/terms': typeof TermsLazyRoute
  '/classic-room/$roomId': typeof ClassicRoomRoomIdLazyRoute
  '/room/$roomId': typeof RoomRoomIdLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/classic-room/$roomId'
    | '/room/$roomId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/classic-room/$roomId'
    | '/room/$roomId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/classic-room/$roomId'
    | '/room/$roomId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  PrivacyLazyRoute: typeof PrivacyLazyRoute
  TermsLazyRoute: typeof TermsLazyRoute
  ClassicRoomRoomIdLazyRoute: typeof ClassicRoomRoomIdLazyRoute
  RoomRoomIdLazyRoute: typeof RoomRoomIdLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/room/$roomId': {
      id: '/room/$roomId'
      path: '/room/$roomId'
      fullPath: '/room/$roomId'
      preLoaderRoute: typeof RoomRoomIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/classic-room/$roomId': {
      id: '/classic-room/$roomId'
      path: '/classic-room/$roomId'
      fullPath: '/classic-room/$roomId'
      preLoaderRoute: typeof ClassicRoomRoomIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  PrivacyLazyRoute: PrivacyLazyRoute,
  TermsLazyRoute: TermsLazyRoute,
  ClassicRoomRoomIdLazyRoute: ClassicRoomRoomIdLazyRoute,
  RoomRoomIdLazyRoute: RoomRoomIdLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
